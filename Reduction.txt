#include<iostream>
#include<omp.h>
#include<climits>
using namespace std;
int A[20];
int n;
void min_reduction()
{
	int min_value=INT_MAX;
	#pragma omp parallel for reduction(min:min_value)
	for(int i=0;i<n;i++)
	{
		if(A[i]<min_value)
		{
			min_value=A[i];
		}
	}
	cout<<"Min Value :"<<min_value<<endl;
	
}
void max_reduction()
{
	int max_value=INT_MIN;
	#pragma omp parallel for reduction(max:max_value)
	for(int i=0;i<n;i++)
	{
		if(A[i]>max_value)
		{
			max_value=A[i];
		}
	}
	cout<<"Max Value :"<<max_value<<endl;
}
void sum_reduction()
{
	int sum=0;
	#pragma omp parallel for reduction(+:sum)
	for(int i=0;i<n;i++)
	{
		sum+=A[i];
	}
	cout<<"Sum :"<<sum<<endl;
}
void avg_reduction()
{
	int sum=0;
	#pragma omp parallel for reduction(+:sum)
	for(int i=0;i<n;i++)
	{
		sum+=A[i];
	}
	cout<<"Average :"<<(double)sum/(n-1)<<endl;
}
int main()
{
	cout<<"Enter the number of elements: ";
	cin>>n;
	cout<<"Enter the elements";
	for(int i=0;i<n;i++)
	{
		cin>>A[i];
	}
	min_reduction();
	max_reduction();
	sum_reduction();
	avg_reduction();
	return 0;
}
