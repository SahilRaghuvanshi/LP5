#include<iostream>
#include<queue>
#include<stack>
#include<omp.h>
using namespace std;
int n,e;
int A[20][20];
int visited[20];
queue<int> q;
stack<int> s;
void BFS(int start)
{
	int u;
	cout<<start<<" ";
	visited[start]=1;
	q.push(start);
	while(!q.empty())
	{
		u=q.front();
		q.pop();
		#pragma omp parallel for
		for(int v=0;v<n;v++)
		{
			if(A[u][v]==1 && visited[v]==0)
			{
				cout<<v<<" ";
				visited[v]=1;
				q.push(v);	
			}
		}
	}
}
void DFS(int start)
{
	int u;
	s.push(start);
	while(!s.empty())
	{
		u=s.top();
		s.pop();
		if(visited[u]==0) {
			cout<<u<<" ";
			visited[u]=1;
		}
		#pragma omp parallel for
		for(int v=0;v<n;v++)
		{
			if(A[u][v]==1 && visited[v]==0)
			{
				s.push(v);	
			}
		}
	}
}
int main()
{
	cout<<"Enter the number of vertices";
	cin>>n;
	cout<<"Enter the number of edges";
	cin>>e;
	#pragma omp parallel for
	for(int i=0;i<n;i++)
	{
		visited[i]=0;
	}
	#pragma omp parallel for
	for(int i=0;i<n;i++)
	{
		for(int j=0;j<n;j++)
		{
			A[i][j]=0;
		}
	}
	cout<<"Enter the edges :";
	for(int i=0;i<e;i++)
	{
		int u,v;
		cin>>u>>v;
		A[u][v]=1;
		A[v][u]=1;
	}
	cout<<"Adjacency Matrix :"<<endl;
	for(int i=0;i<n;i++)
	{
		for(int j=0;j<n;j++)
		{
			cout<<A[i][j]<<" ";
		}
		cout<<"\n";
	}
	cout<<"Enter the Starting vertex"<<endl;
	int start;
	cin>>start;
	cout<<"BFS :";
	BFS(start);
	#pragma omp parallel for
	for(int i=0;i<n;i++)
	{
		visited[i]=0;
	}
	cout<<"DFS :";
	DFS(start);
	return 0;
}
