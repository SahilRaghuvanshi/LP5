import warnings
warnings.filterwarnings('ignore')
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
%matplotlib inline
(X_train,y_train),(X_test,y_test) = tf.keras.datasets.fashion_mnist.load_data()
plt.imshow(X_train[0])
plt.imshow(X_train[1])
//////////////////////////////
X_train =X_train.astype('float32')/255.0;
X_test= X_test.astype('float32')/255.0;
//////////////////////////////
X_train= X_train.reshape(-1,28,28,1)
X_test= X_test.reshape(-1,28,28,1)
//////////////////////////////
X_train.shape 
X_test.shape
y_train.shape
y_test.shape
//////////////////////////////
model = tf.keras.Sequential(
                    [
                        tf.keras.layers.Conv2D(32,(3,3),activation='relu',input_shape=(28,28,1)),
                        tf.keras.layers.MaxPooling2D((2,2)),
                        tf.keras.layers.Dropout(0.25),
                        tf.keras.layers.Conv2D(64,(3,3),activation='relu'),
                        tf.keras.layers.MaxPooling2D((2,2)),
                        tf.keras.layers.Dropout(0.25),
                        tf.keras.layers.Conv2D(64,(3,3),activation='relu'),
                        tf.keras.layers.Flatten(),
                        tf.keras.layers.Dense(128,activation='relu'),
                        tf.keras.layers.Dropout(0.25),
                        tf.keras.layers.Dense(10,activation='softmax'),
                    ]
                  )
//////////////////////////////
model.summary()
//////////////////////////////
model.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])
history = model.fit(X_train,y_train, epochs=10, batch_size=200, validation_data=(X_test,y_test))
//////////////////////////////
test_loss, test_acc = model.evaluate(X_test,y_test)
print("Test_ Accuracy:",test_acc*100)
//////////////////////////////

