import warnings
warnings.filterwarnings('ignore')
import tensorflow as tf
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
%matplotlib inline
(X_train,y_train),(X_test,y_test)= tf.keras.datasets.mnist.load_data()
plt.imshow(X_train[0],cmap='gray')
print(X_train[0])
X_train = X_train.astype('float32')/255.0;
X_test = X_test.astype('float32')/255.0;
X_train.shape
X_test.shape
y_train.shape
y_test.shape
X_train=X_train.reshape(60000,784)
X_test=X_test.reshape(10000,784)
/////////////////////////
num_classes=10;
y_train = np.eye(num_classes)[y_train.astype(int)]
y_test = np.eye(num_classes)[y_test.astype(int)]
/////////////////////////
model = tf.keras.Sequential(
                                [
                                  tf.keras.layers.Dense(units=512,activation='relu',input_shape=(784,)),
                                  tf.keras.layers.Dropout(0.2),
                                  tf.keras.layers.Dense(units=512,activation='relu'),
                                  tf.keras.layers.Dropout(0.2),
                                  tf.keras.layers.Dense(num_classes,activation="softmax")
                                ]
                           )
/////////////////////////
model.summary()
/////////////////////////
model.compile(optimizer=tf.keras.optimizers.RMSprop(learning_rate=0.001),loss='categorical_crossentropy',metrics=['accuracy'])
/////////////////////////
history = model.fit(X_train,y_train, epochs=20, batch_size=128, verbose=1, validation_data=(X_test,y_test))
/////////////////////////
test_loss, test_acc = model.evaluate(X_test,y_test)
print("Test_Accuracy",test_acc*100)
/////////////////////////


